for _ in range(max_iter):
    index1 = index2 = -1
    # 寻找不满足约束的alpha_i
    for i in range(m):
        Ei = f(X[i]) - y[i]
        if alpha[i] < C and y[i] * Ei < -epsilon:
            index1 = i
            break
        if alpha[i] > 0 and y[i] * Ei > epsilon:
            index1 = i
            break

    # 都满足约束则随机选择
    if index1 == -1:
        index1 = np.random.randint(0, m)

    E1 = f(X[index1]) - y[index1]

    # 寻找使更新步长最大的alpha_j
    E2 = E1
    for i in range(m):
        if i == index1:
            continue
        Ei = f(X[i]) - y[i]
        if np.abs(Ei - E1) > np.abs(E2 - E1):
            E2 = Ei
            index2 = i

    alpha1_old = alpha[index1]
    alpha2_old = alpha[index2]
    # 更新
    alpha2_new = alpha2_old + y[index2] * (E1 - E2) / (kappa(X[index1], X[index1]) + kappa(X[index2], X[index2]) - 2 * kappa(X[index1], X[index2]))
    # 确定可行域
    if y[index1] == y[index2]:
        L = max(0, alpha1_old + alpha2_old - C)
        H = min(C, alpha2_old + alpha1_old)
    else:
        L = max(0, alpha2_old - alpha1_old)
        H = min(C, alpha2_old - alpha1_old + C)

    # 修剪
    alpha2_new = clip(alpha2_new, L, H)

    alpha1_new = alpha1_old + y[index1] * y[index2] * (alpha2_old - alpha2_new)
    alpha[index1] = alpha1_new
    alpha[index2] = alpha2_new

    # 更新b
    b1 = -E1 - y[index1] * kappa(X[index1], X[index1]) * (alpha1_new - alpha1_old) - y[index2] * kappa(X[index1], X[index2]) * (alpha2_new - alpha2_old) + b
    b2 = -E2 - y[index1] * kappa(X[index1], X[index2]) * (alpha1_new - alpha1_old) - y[index2] * kappa(X[index2], X[index2]) * (alpha2_new - alpha2_old) + b
    if 0 < alpha1_new < C:
        b = b1
    elif 0 < alpha2_new < C:
        b = b2
    elif L != H:
        b = (b1 + b2) / 2