def generate_normal_tree(X, y, cur_node_index):
    """
    建树
    :param D: 训练集
    :param A: 属性字典
    :param cur_node_index: 当前点的索引
    :return: void
    """
    # 样本都属于同一类别
    if len(set(y)) == 1:
        g.nodes[cur_node_index]['label'] = 'class{}'.format(y[0])
        return

    # 进行线性分类
    clf = LogisticRegression().fit(X, y)
    w, b = clf.coef_[0], clf.intercept_[0]
    g.nodes[cur_node_index]['w'] = w
    g.nodes[cur_node_index]['b'] = b
    g.nodes[cur_node_index]['label'] = 'w={},b={}'.format(w, b)
    # 得到分类后的子集
    X1, y1 = [], []
    X2, y2 = [], []
    for i in range(len(y)):
        if np.dot(w, X[i]) + b > 0:
            X1.append(X[i])
            y1.append(y[i])
        else:
            X2.append(X[i])
            y2.append(y[i])

    X1 = np.array(X1)
    X2 = np.array(X2)
    y1 = np.array(y1)
    y2 = np.array(y2)
    if len(y1) == 0 or len(y2) == 0:
        # 不可分类
        g.nodes[cur_node_index]['label'] = 'class: {}'.format(collections.Counter(y).most_common(1)[0][0])
        return

    # 产生分支节点
    node_num = g.number_of_nodes()
    g.add_node(node_num + 1, label=None, w=None, b=None)
    g.add_node(node_num + 2, label=None, w=None, b=None)
    g.add_edge(cur_node_index, node_num + 1, label='wx+b>0')
    g.add_edge(cur_node_index, node_num + 2, label='wx+b<=0')
    generate_normal_tree(X1, y1, node_num + 1)
    generate_normal_tree(X2, y2, node_num + 2)